name: Docker Image CI

on:
  push:
    branches: [ main ]
  workflow_dispatch:
env:
  path: tf
  
jobs:
  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: 1.17
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: v1.29
          # Optional: working directory, useful for monorepos
          working-directory: docker-gs-ping

  test:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: test the Docker image
      run: |
        cd ./docker-gs-ping
        docker build -t docker-gs-ping:latest .
        go test -v main_test.go
  docker:   
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Docker login
        env:
          DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - name: build docker image
        run: |
          cd ./docker-gs-ping/
          docker build -t docker-gs-ping -f Dockerfile .
          docker tag docker-gs-ping:latest ${{secrets.DOCKERHUB_USERNAME}}/devops:latest
      - name: docker push
        run: docker push docker-gs-ping:latest ${{secrets.DOCKERHUB_USERNAME}}/devops
        
  # terraform-init-plan:
  #   name: 'Terraform'
  #   runs-on: ubuntu-latest

  #   # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
  #   defaults:
  #     run:
  #       shell: bash

  #   steps:
  #   # Checkout the repository to the GitHub Actions runner
  #   - name: Checkout
  #     uses: actions/checkout@v3

  #   # Checks that all Terraform configuration files adhere to a canonical format
  #   - name: Terraform Format
  #     run: terraform fmt -check

  #   # Generates an execution plan for Terraform
  #   - name: Terraform Plan
  #     env:
  #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     run: |
  #       cd $path/
  #       terraform init -input=false
  #       terraform plan 

  # terraform-apply:
  #   runs-on: ubuntu-latest

  #   # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
  #   defaults:
  #     run:
  #       shell: bash

  #   steps:
  #     # On push to "master", build or change infrastructure according to Terraform configuration files
  #     # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
  #   - name: Terraform Apply
  #     env:
  #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     # if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
  #     run: |
  #       cd $path/
  #       terraform init -input=false
  #       terraform apply -auto-approve 
