name: Docker Image CI

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # golangci:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/setup-go@v3
  #       with:
  #         go-version: 1.17
  #     - uses: actions/checkout@v3
  #     - name: golangci-lint
  #       uses: golangci/golangci-lint-action@v3
  #       with:
  #         # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
  #         version: v1.29
  #         # Optional: working directory, useful for monorepos
  #         working-directory: docker-gs-ping

  # test:
  #   name: Test
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Check out code
  #     uses: actions/checkout@v3
  #   - name: test the Docker image
  #     run: |
  #       cd ./docker-gs-ping
  #       docker build -t docker-gs-ping:latest .
  #       go test -v main_test.go

  # docker: 
  #   name: Docker  
  #   runs-on: ubuntu-latest
  #   needs: [golangci, test]
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v3
  #     - name: Docker login
  #       env:
  #         DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  #         DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
  #       run: |
  #         docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
  #     - name: build docker image
  #       run: |
  #         cd ./docker-gs-ping/
  #         docker build -t docker-gs-ping -f Dockerfile .
  #         docker tag docker-gs-ping:latest ${{secrets.DOCKERHUB_USERNAME}}/devops:latest
  #     - name: docker push
  #       run: docker push ${{secrets.DOCKERHUB_USERNAME}}/devops
        
  # terraform-init-plan:
  #   name: 'Terraform plan'
  #   runs-on: ubuntu-latest
  #   needs: docker

  #   # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
  #   defaults:
  #     run:
  #       shell: bash

  #   steps:
  #   # Checkout the repository to the GitHub Actions runner
  #   - name: Checkout
  #     uses: actions/checkout@v3

  #   # Checks that all Terraform configuration files adhere to a canonical format
  #   - name: Terraform Format
  #     run: terraform fmt -check

  #   # Generates an execution plan for Terraform
  #   - name: Terraform Plan
  #     env:
  #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     run: |
  #       cd ./tf/
  #       terraform init -input=false
  #       terraform plan 

  # terraform-apply:
  #   name: 'Terraform apply'
  #   runs-on: ubuntu-latest
  #   needs: terraform-init-plan

  #   # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
  #   defaults:
  #     run:
  #       shell: bash

  #   steps:
  #     # Checkout the repository to the GitHub Actions runner
  #   - name: Checkout
  #     uses: actions/checkout@v3

  #     # On push to "master", build or change infrastructure according to Terraform configuration files
  #     # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
  #   - name: Terraform Apply
  #     env:
  #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     run: |
  #       cd ./tf/
  #       terraform init -input=false
  #       terraform apply -auto-approve 

  ansible-monitoring:
    name: ansible deploy monitoring
    runs-on: ubuntu-latest
    # needs: terraform-apply
    steps:
    - name: Checkout
      uses: actions/checkout@v3    
    - name: install python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'  
    - name: install boto3
      run: |
          pip install boto3 requests pyjwt   
    - name: Create SSH key
      run: |
          sudo mkdir -p /home/ubuntu/.ssh/
          sudo echo "$SSH_PRIVATE_KEY" > /home/ubuntu/.ssh/private.key
          sudo chmod 600 /home/ubuntu/.ssh/private.key
      shell: bash
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }} 
    - name: cat SSH
      run: |
          sudo cat /home/ubuntu/.ssh/private.key
      shell: bash
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }} 
    - name: Play Ansible Playbook
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        ansible --version
        python3 --version
        python3.10 --version
        pip list | grep boto
        export ANSIBLE_HOST_KEY_CHECKING=False
        ansible-playbook ./ansible/monitoring/playbook.yml -i 18.193.111.222 --key-file /home/ubuntu/.ssh/private.key      

  ansible-app:
    name: ansible deploy app
    runs-on: ubuntu-latest
    needs: ansible-monitoring
    steps:
    - name: Checkout
      uses: actions/checkout@v3    
    - name: install python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'  
    - name: install boto3
      run: |
          pip install boto3 requests pyjwt   
    - name: Create SSH key
      run: |
          sudo mkdir -p /home/ubuntu/.ssh/
          sudo echo "$SSH_PRIVATE_KEY" > /home/ubuntu/.ssh/private.key
          sudo chmod 600 /home/ubuntu/.ssh/private.key
          sudo cat /home/ubuntu/.ssh/private.key
      shell: bash
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }} 

    - name: Play Ansible Playbook
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        ansible --version
        python3 --version
        python3.10 --version
        pip list | grep boto
        export ANSIBLE_HOST_KEY_CHECKING=False
        ansible-playbook ./ansible/app/playbook.yml -i 18.193.111.222 --key-file /home/ubuntu/.ssh/private.key     



      
