name: Diplom CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  container_image: "${{ secrets.DOCKERHUB_USERNAME }}/devops:latest"
  DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  golangci:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: 1.17
      - name: Checkout code
        uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.29
          working-directory: docker-gs-ping

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: test the Docker image
      run: |
        cd ./docker-gs-ping
        docker build -t docker-gs-ping:latest .
        go test -v main_test.go

  docker: 
    name: Docker  
    runs-on: ubuntu-latest
    needs: [golangci, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Docker login
        env:
          DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - name: build docker image
        run: |
          cd ./docker-gs-ping/
          docker build -t docker-gs-ping -f Dockerfile .
          docker tag docker-gs-ping:latest ${{secrets.DOCKERHUB_USERNAME}}/devops:latest
      - name: docker push
        run: docker push ${{secrets.DOCKERHUB_USERNAME}}/devops
        
  terraform-init-plan:
    name: 'Terraform plan'
    runs-on: ubuntu-latest
    needs: docker
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        cd ./tf/
        terraform init -input=false
        terraform plan 

  terraform-apply:
    name: 'Terraform apply'
    runs-on: ubuntu-latest
    needs: terraform-init-plan
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    outputs: 
      public_ip_monitoring: ${{ steps.ip.outputs.public_ip_monitoring }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Terraform Apply
      id: ip
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        cd ./tf/
        terraform init -input=false
        terraform apply -auto-approve
        export $(terraform output | sed 's/\s*=\s*/=/g' | xargs)
        echo "public_ip_monitoring=$public_ip" >> "$GITHUB_OUTPUT"

  ansible-monitoring:
    name: ansible deploy monitoring
    runs-on: ubuntu-latest
    needs: terraform-apply
    outputs: 
      public_ip_app: ${{ steps.ip.outputs.public_ip_app }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3    
    - name: install python
      run: |
          sudo apt-get -qy update
          sudo apt install -qy python3 python3-pip software-properties-common ansible
          pip install boto3
    - name: Create SSH key
      run: |
          sudo mkdir -p /home/ubuntu/.ssh/
          sudo echo "$SSH_PRIVATE_KEY" > /home/ubuntu/.ssh/private.key
          sudo chmod 600 /home/ubuntu/.ssh/private.key
      shell: bash
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }} 
    - name: add ip to var
      id: ip
      run: |
         echo "public_ip_app=${{needs.terraform-apply.outputs.public_ip_monitoring}}" >> "$GITHUB_OUTPUT"
    - name: Play Ansible Playbook
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        ansible --version
        python3 --version
        python3.10 --version
        pip list | grep boto
        export ANSIBLE_HOST_KEY_CHECKING=False
        ansible-playbook -u ubuntu ./ansible/monitoring/playbook.yml -i ${{needs.terraform-apply.outputs.public_ip_monitoring}},  --key-file /home/ubuntu/.ssh/private.key      

  ansible-app:
    name: ansible deploy app
    runs-on: ubuntu-latest
    needs: ansible-monitoring
    steps:
    - name: Checkout code
      uses: actions/checkout@v3    
    - name: install python
      run: |
          sudo apt-get -qy update
          sudo apt install -qy python3 python3-pip software-properties-common ansible
          pip install boto3
    - name: Create SSH key
      run: |
          sudo mkdir -p /home/ubuntu/.ssh/
          sudo echo "$SSH_PRIVATE_KEY" > /home/ubuntu/.ssh/private.key
          sudo chmod 600 /home/ubuntu/.ssh/private.key
      shell: bash
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }} 
    - name: Play Ansible Playbook
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} 
      run: |
        ansible --version
        python3 --version
        python3.10 --version
        pip list | grep boto
        export ANSIBLE_HOST_KEY_CHECKING=False
        ansible-playbook -u ubuntu ./ansible/app/playbook.yml -i ${{needs.ansible-monitoring.outputs.public_ip_app}}, --key-file /home/ubuntu/.ssh/private.key       



      